/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Fault } from '../models';
// @ts-ignore
import { Upload } from '../models';
/**
 * UploadsApi - axios parameter creator
 * @export
 */
export const UploadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Uploads a new data file to create an activity from. Requires activity:write scope.
         * @summary Upload Activity
         * @param {File} [file] The uploaded file.
         * @param {string} [name] The desired name of the resulting activity.
         * @param {string} [description] The desired description of the resulting activity.
         * @param {string} [trainer] Whether the resulting activity should be marked as having been performed on a trainer.
         * @param {string} [commute] Whether the resulting activity should be tagged as a commute.
         * @param {string} [dataType] The format of the uploaded file.
         * @param {string} [externalId] The desired external identifier of the resulting activity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpload: async (file?: File, name?: string, description?: string, trainer?: string, commute?: string, dataType?: string, externalId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/uploads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (trainer !== undefined) { 
                localVarFormParams.append('trainer', trainer as any);
            }
    
            if (commute !== undefined) { 
                localVarFormParams.append('commute', commute as any);
            }
    
            if (dataType !== undefined) { 
                localVarFormParams.append('data_type', dataType as any);
            }
    
            if (externalId !== undefined) { 
                localVarFormParams.append('external_id', externalId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an upload for a given identifier. Requires activity:write scope.
         * @summary Get Upload
         * @param {number} uploadId The identifier of the upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadById: async (uploadId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadId' is not null or undefined
            assertParamExists('getUploadById', 'uploadId', uploadId)
            const localVarPath = `/uploads/{uploadId}`
                .replace(`{${"uploadId"}}`, encodeURIComponent(String(uploadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadsApi - functional programming interface
 * @export
 */
export const UploadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadsApiAxiosParamCreator(configuration)
    return {
        /**
         * Uploads a new data file to create an activity from. Requires activity:write scope.
         * @summary Upload Activity
         * @param {File} [file] The uploaded file.
         * @param {string} [name] The desired name of the resulting activity.
         * @param {string} [description] The desired description of the resulting activity.
         * @param {string} [trainer] Whether the resulting activity should be marked as having been performed on a trainer.
         * @param {string} [commute] Whether the resulting activity should be tagged as a commute.
         * @param {string} [dataType] The format of the uploaded file.
         * @param {string} [externalId] The desired external identifier of the resulting activity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUpload(file?: File, name?: string, description?: string, trainer?: string, commute?: string, dataType?: string, externalId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Upload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUpload(file, name, description, trainer, commute, dataType, externalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an upload for a given identifier. Requires activity:write scope.
         * @summary Get Upload
         * @param {number} uploadId The identifier of the upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadById(uploadId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Upload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUploadById(uploadId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UploadsApi - factory interface
 * @export
 */
export const UploadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadsApiFp(configuration)
    return {
        /**
         * Uploads a new data file to create an activity from. Requires activity:write scope.
         * @summary Upload Activity
         * @param {File} [file] The uploaded file.
         * @param {string} [name] The desired name of the resulting activity.
         * @param {string} [description] The desired description of the resulting activity.
         * @param {string} [trainer] Whether the resulting activity should be marked as having been performed on a trainer.
         * @param {string} [commute] Whether the resulting activity should be tagged as a commute.
         * @param {string} [dataType] The format of the uploaded file.
         * @param {string} [externalId] The desired external identifier of the resulting activity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpload(file?: File, name?: string, description?: string, trainer?: string, commute?: string, dataType?: string, externalId?: string, options?: any): AxiosPromise<Upload> {
            return localVarFp.createUpload(file, name, description, trainer, commute, dataType, externalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an upload for a given identifier. Requires activity:write scope.
         * @summary Get Upload
         * @param {number} uploadId The identifier of the upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadById(uploadId: number, options?: any): AxiosPromise<Upload> {
            return localVarFp.getUploadById(uploadId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UploadsApi - interface
 * @export
 * @interface UploadsApi
 */
export interface UploadsApiInterface {
    /**
     * Uploads a new data file to create an activity from. Requires activity:write scope.
     * @summary Upload Activity
     * @param {File} [file] The uploaded file.
     * @param {string} [name] The desired name of the resulting activity.
     * @param {string} [description] The desired description of the resulting activity.
     * @param {string} [trainer] Whether the resulting activity should be marked as having been performed on a trainer.
     * @param {string} [commute] Whether the resulting activity should be tagged as a commute.
     * @param {string} [dataType] The format of the uploaded file.
     * @param {string} [externalId] The desired external identifier of the resulting activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadsApiInterface
     */
    createUpload(file?: File, name?: string, description?: string, trainer?: string, commute?: string, dataType?: string, externalId?: string, options?: AxiosRequestConfig): AxiosPromise<Upload>;

    /**
     * Returns an upload for a given identifier. Requires activity:write scope.
     * @summary Get Upload
     * @param {number} uploadId The identifier of the upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadsApiInterface
     */
    getUploadById(uploadId: number, options?: AxiosRequestConfig): AxiosPromise<Upload>;

}

/**
 * UploadsApi - object-oriented interface
 * @export
 * @class UploadsApi
 * @extends {BaseAPI}
 */
export class UploadsApi extends BaseAPI implements UploadsApiInterface {
    /**
     * Uploads a new data file to create an activity from. Requires activity:write scope.
     * @summary Upload Activity
     * @param {File} [file] The uploaded file.
     * @param {string} [name] The desired name of the resulting activity.
     * @param {string} [description] The desired description of the resulting activity.
     * @param {string} [trainer] Whether the resulting activity should be marked as having been performed on a trainer.
     * @param {string} [commute] Whether the resulting activity should be tagged as a commute.
     * @param {string} [dataType] The format of the uploaded file.
     * @param {string} [externalId] The desired external identifier of the resulting activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadsApi
     */
    public createUpload(file?: File, name?: string, description?: string, trainer?: string, commute?: string, dataType?: string, externalId?: string, options?: AxiosRequestConfig) {
        return UploadsApiFp(this.configuration).createUpload(file, name, description, trainer, commute, dataType, externalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an upload for a given identifier. Requires activity:write scope.
     * @summary Get Upload
     * @param {number} uploadId The identifier of the upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadsApi
     */
    public getUploadById(uploadId: number, options?: AxiosRequestConfig) {
        return UploadsApiFp(this.configuration).getUploadById(uploadId, options).then((request) => request(this.axios, this.basePath));
    }
}
