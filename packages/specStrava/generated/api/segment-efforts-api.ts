/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DetailedSegmentEffort } from '../models';
// @ts-ignore
import { Fault } from '../models';
/**
 * SegmentEffortsApi - axios parameter creator
 * @export
 */
export const SegmentEffortsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a set of the authenticated athlete\'s segment efforts for a given segment.  Requires subscription.
         * @summary List Segment Efforts
         * @param {number} segmentId The identifier of the segment.
         * @param {string} [startDateLocal] ISO 8601 formatted date time.
         * @param {string} [endDateLocal] ISO 8601 formatted date time.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEffortsBySegmentId: async (segmentId: number, startDateLocal?: string, endDateLocal?: string, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'segmentId' is not null or undefined
            assertParamExists('getEffortsBySegmentId', 'segmentId', segmentId)
            const localVarPath = `/segment_efforts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (segmentId !== undefined) {
                localVarQueryParameter['segment_id'] = segmentId;
            }

            if (startDateLocal !== undefined) {
                localVarQueryParameter['start_date_local'] = (startDateLocal as any instanceof Date) ?
                    (startDateLocal as any).toISOString() :
                    startDateLocal;
            }

            if (endDateLocal !== undefined) {
                localVarQueryParameter['end_date_local'] = (endDateLocal as any instanceof Date) ?
                    (endDateLocal as any).toISOString() :
                    endDateLocal;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
         * @summary Get Segment Effort
         * @param {number} id The identifier of the segment effort.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegmentEffortById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSegmentEffortById', 'id', id)
            const localVarPath = `/segment_efforts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SegmentEffortsApi - functional programming interface
 * @export
 */
export const SegmentEffortsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SegmentEffortsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a set of the authenticated athlete\'s segment efforts for a given segment.  Requires subscription.
         * @summary List Segment Efforts
         * @param {number} segmentId The identifier of the segment.
         * @param {string} [startDateLocal] ISO 8601 formatted date time.
         * @param {string} [endDateLocal] ISO 8601 formatted date time.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEffortsBySegmentId(segmentId: number, startDateLocal?: string, endDateLocal?: string, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DetailedSegmentEffort>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEffortsBySegmentId(segmentId, startDateLocal, endDateLocal, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
         * @summary Get Segment Effort
         * @param {number} id The identifier of the segment effort.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSegmentEffortById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedSegmentEffort>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSegmentEffortById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SegmentEffortsApi - factory interface
 * @export
 */
export const SegmentEffortsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SegmentEffortsApiFp(configuration)
    return {
        /**
         * Returns a set of the authenticated athlete\'s segment efforts for a given segment.  Requires subscription.
         * @summary List Segment Efforts
         * @param {number} segmentId The identifier of the segment.
         * @param {string} [startDateLocal] ISO 8601 formatted date time.
         * @param {string} [endDateLocal] ISO 8601 formatted date time.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEffortsBySegmentId(segmentId: number, startDateLocal?: string, endDateLocal?: string, perPage?: number, options?: any): AxiosPromise<Array<DetailedSegmentEffort>> {
            return localVarFp.getEffortsBySegmentId(segmentId, startDateLocal, endDateLocal, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
         * @summary Get Segment Effort
         * @param {number} id The identifier of the segment effort.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegmentEffortById(id: number, options?: any): AxiosPromise<DetailedSegmentEffort> {
            return localVarFp.getSegmentEffortById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SegmentEffortsApi - interface
 * @export
 * @interface SegmentEffortsApi
 */
export interface SegmentEffortsApiInterface {
    /**
     * Returns a set of the authenticated athlete\'s segment efforts for a given segment.  Requires subscription.
     * @summary List Segment Efforts
     * @param {number} segmentId The identifier of the segment.
     * @param {string} [startDateLocal] ISO 8601 formatted date time.
     * @param {string} [endDateLocal] ISO 8601 formatted date time.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentEffortsApiInterface
     */
    getEffortsBySegmentId(segmentId: number, startDateLocal?: string, endDateLocal?: string, perPage?: number, options?: AxiosRequestConfig): AxiosPromise<Array<DetailedSegmentEffort>>;

    /**
     * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
     * @summary Get Segment Effort
     * @param {number} id The identifier of the segment effort.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentEffortsApiInterface
     */
    getSegmentEffortById(id: number, options?: AxiosRequestConfig): AxiosPromise<DetailedSegmentEffort>;

}

/**
 * SegmentEffortsApi - object-oriented interface
 * @export
 * @class SegmentEffortsApi
 * @extends {BaseAPI}
 */
export class SegmentEffortsApi extends BaseAPI implements SegmentEffortsApiInterface {
    /**
     * Returns a set of the authenticated athlete\'s segment efforts for a given segment.  Requires subscription.
     * @summary List Segment Efforts
     * @param {number} segmentId The identifier of the segment.
     * @param {string} [startDateLocal] ISO 8601 formatted date time.
     * @param {string} [endDateLocal] ISO 8601 formatted date time.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentEffortsApi
     */
    public getEffortsBySegmentId(segmentId: number, startDateLocal?: string, endDateLocal?: string, perPage?: number, options?: AxiosRequestConfig) {
        return SegmentEffortsApiFp(this.configuration).getEffortsBySegmentId(segmentId, startDateLocal, endDateLocal, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
     * @summary Get Segment Effort
     * @param {number} id The identifier of the segment effort.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentEffortsApi
     */
    public getSegmentEffortById(id: number, options?: AxiosRequestConfig) {
        return SegmentEffortsApiFp(this.configuration).getSegmentEffortById(id, options).then((request) => request(this.axios, this.basePath));
    }
}
