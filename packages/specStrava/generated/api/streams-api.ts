/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Fault } from '../models';
// @ts-ignore
import { StreamSet } from '../models';
/**
 * StreamsApi - axios parameter creator
 * @export
 */
export const StreamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the given activity\'s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
         * @summary Get Activity Streams
         * @param {number} id The identifier of the activity.
         * @param {Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>} keys Desired stream types.
         * @param {boolean} keyByType Must be true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityStreams: async (id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getActivityStreams', 'id', id)
            // verify required parameter 'keys' is not null or undefined
            assertParamExists('getActivityStreams', 'keys', keys)
            // verify required parameter 'keyByType' is not null or undefined
            assertParamExists('getActivityStreams', 'keyByType', keyByType)
            const localVarPath = `/activities/{id}/streams`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (keys) {
                localVarQueryParameter['keys'] = keys.join(COLLECTION_FORMATS.csv);
            }

            if (keyByType !== undefined) {
                localVarQueryParameter['key_by_type'] = keyByType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the given route\'s streams. Requires read_all scope for private routes.
         * @summary Get Route Streams
         * @param {number} id The identifier of the route.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRouteStreams: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRouteStreams', 'id', id)
            const localVarPath = `/routes/{id}/streams`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
         * @summary Get Segment Effort Streams
         * @param {number} id The identifier of the segment effort.
         * @param {Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>} keys The types of streams to return.
         * @param {boolean} keyByType Must be true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegmentEffortStreams: async (id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSegmentEffortStreams', 'id', id)
            // verify required parameter 'keys' is not null or undefined
            assertParamExists('getSegmentEffortStreams', 'keys', keys)
            // verify required parameter 'keyByType' is not null or undefined
            assertParamExists('getSegmentEffortStreams', 'keyByType', keyByType)
            const localVarPath = `/segment_efforts/{id}/streams`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (keys) {
                localVarQueryParameter['keys'] = keys.join(COLLECTION_FORMATS.csv);
            }

            if (keyByType !== undefined) {
                localVarQueryParameter['key_by_type'] = keyByType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the given segment\'s streams. Requires read_all scope for private segments.
         * @summary Get Segment Streams
         * @param {number} id The identifier of the segment.
         * @param {Array<'distance' | 'latlng' | 'altitude'>} keys The types of streams to return.
         * @param {boolean} keyByType Must be true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegmentStreams: async (id: number, keys: Array<'distance' | 'latlng' | 'altitude'>, keyByType: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSegmentStreams', 'id', id)
            // verify required parameter 'keys' is not null or undefined
            assertParamExists('getSegmentStreams', 'keys', keys)
            // verify required parameter 'keyByType' is not null or undefined
            assertParamExists('getSegmentStreams', 'keyByType', keyByType)
            const localVarPath = `/segments/{id}/streams`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (keys) {
                localVarQueryParameter['keys'] = keys.join(COLLECTION_FORMATS.csv);
            }

            if (keyByType !== undefined) {
                localVarQueryParameter['key_by_type'] = keyByType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamsApi - functional programming interface
 * @export
 */
export const StreamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StreamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the given activity\'s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
         * @summary Get Activity Streams
         * @param {number} id The identifier of the activity.
         * @param {Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>} keys Desired stream types.
         * @param {boolean} keyByType Must be true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivityStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivityStreams(id, keys, keyByType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the given route\'s streams. Requires read_all scope for private routes.
         * @summary Get Route Streams
         * @param {number} id The identifier of the route.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRouteStreams(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRouteStreams(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
         * @summary Get Segment Effort Streams
         * @param {number} id The identifier of the segment effort.
         * @param {Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>} keys The types of streams to return.
         * @param {boolean} keyByType Must be true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSegmentEffortStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSegmentEffortStreams(id, keys, keyByType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the given segment\'s streams. Requires read_all scope for private segments.
         * @summary Get Segment Streams
         * @param {number} id The identifier of the segment.
         * @param {Array<'distance' | 'latlng' | 'altitude'>} keys The types of streams to return.
         * @param {boolean} keyByType Must be true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSegmentStreams(id: number, keys: Array<'distance' | 'latlng' | 'altitude'>, keyByType: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSegmentStreams(id, keys, keyByType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StreamsApi - factory interface
 * @export
 */
export const StreamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StreamsApiFp(configuration)
    return {
        /**
         * Returns the given activity\'s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
         * @summary Get Activity Streams
         * @param {number} id The identifier of the activity.
         * @param {Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>} keys Desired stream types.
         * @param {boolean} keyByType Must be true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, options?: any): AxiosPromise<StreamSet> {
            return localVarFp.getActivityStreams(id, keys, keyByType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the given route\'s streams. Requires read_all scope for private routes.
         * @summary Get Route Streams
         * @param {number} id The identifier of the route.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRouteStreams(id: number, options?: any): AxiosPromise<StreamSet> {
            return localVarFp.getRouteStreams(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
         * @summary Get Segment Effort Streams
         * @param {number} id The identifier of the segment effort.
         * @param {Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>} keys The types of streams to return.
         * @param {boolean} keyByType Must be true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegmentEffortStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, options?: any): AxiosPromise<StreamSet> {
            return localVarFp.getSegmentEffortStreams(id, keys, keyByType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the given segment\'s streams. Requires read_all scope for private segments.
         * @summary Get Segment Streams
         * @param {number} id The identifier of the segment.
         * @param {Array<'distance' | 'latlng' | 'altitude'>} keys The types of streams to return.
         * @param {boolean} keyByType Must be true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegmentStreams(id: number, keys: Array<'distance' | 'latlng' | 'altitude'>, keyByType: boolean, options?: any): AxiosPromise<StreamSet> {
            return localVarFp.getSegmentStreams(id, keys, keyByType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreamsApi - interface
 * @export
 * @interface StreamsApi
 */
export interface StreamsApiInterface {
    /**
     * Returns the given activity\'s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
     * @summary Get Activity Streams
     * @param {number} id The identifier of the activity.
     * @param {Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>} keys Desired stream types.
     * @param {boolean} keyByType Must be true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamsApiInterface
     */
    getActivityStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, options?: AxiosRequestConfig): AxiosPromise<StreamSet>;

    /**
     * Returns the given route\'s streams. Requires read_all scope for private routes.
     * @summary Get Route Streams
     * @param {number} id The identifier of the route.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamsApiInterface
     */
    getRouteStreams(id: number, options?: AxiosRequestConfig): AxiosPromise<StreamSet>;

    /**
     * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
     * @summary Get Segment Effort Streams
     * @param {number} id The identifier of the segment effort.
     * @param {Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>} keys The types of streams to return.
     * @param {boolean} keyByType Must be true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamsApiInterface
     */
    getSegmentEffortStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, options?: AxiosRequestConfig): AxiosPromise<StreamSet>;

    /**
     * Returns the given segment\'s streams. Requires read_all scope for private segments.
     * @summary Get Segment Streams
     * @param {number} id The identifier of the segment.
     * @param {Array<'distance' | 'latlng' | 'altitude'>} keys The types of streams to return.
     * @param {boolean} keyByType Must be true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamsApiInterface
     */
    getSegmentStreams(id: number, keys: Array<'distance' | 'latlng' | 'altitude'>, keyByType: boolean, options?: AxiosRequestConfig): AxiosPromise<StreamSet>;

}

/**
 * StreamsApi - object-oriented interface
 * @export
 * @class StreamsApi
 * @extends {BaseAPI}
 */
export class StreamsApi extends BaseAPI implements StreamsApiInterface {
    /**
     * Returns the given activity\'s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
     * @summary Get Activity Streams
     * @param {number} id The identifier of the activity.
     * @param {Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>} keys Desired stream types.
     * @param {boolean} keyByType Must be true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamsApi
     */
    public getActivityStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, options?: AxiosRequestConfig) {
        return StreamsApiFp(this.configuration).getActivityStreams(id, keys, keyByType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the given route\'s streams. Requires read_all scope for private routes.
     * @summary Get Route Streams
     * @param {number} id The identifier of the route.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamsApi
     */
    public getRouteStreams(id: number, options?: AxiosRequestConfig) {
        return StreamsApiFp(this.configuration).getRouteStreams(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
     * @summary Get Segment Effort Streams
     * @param {number} id The identifier of the segment effort.
     * @param {Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>} keys The types of streams to return.
     * @param {boolean} keyByType Must be true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamsApi
     */
    public getSegmentEffortStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, options?: AxiosRequestConfig) {
        return StreamsApiFp(this.configuration).getSegmentEffortStreams(id, keys, keyByType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the given segment\'s streams. Requires read_all scope for private segments.
     * @summary Get Segment Streams
     * @param {number} id The identifier of the segment.
     * @param {Array<'distance' | 'latlng' | 'altitude'>} keys The types of streams to return.
     * @param {boolean} keyByType Must be true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamsApi
     */
    public getSegmentStreams(id: number, keys: Array<'distance' | 'latlng' | 'altitude'>, keyByType: boolean, options?: AxiosRequestConfig) {
        return StreamsApiFp(this.configuration).getSegmentStreams(id, keys, keyByType, options).then((request) => request(this.axios, this.basePath));
    }
}
