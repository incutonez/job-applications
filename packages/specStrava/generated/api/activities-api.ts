/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActivityZone } from '../models';
// @ts-ignore
import { Comment } from '../models';
// @ts-ignore
import { DetailedActivity } from '../models';
// @ts-ignore
import { Fault } from '../models';
// @ts-ignore
import { Lap } from '../models';
// @ts-ignore
import { SummaryActivity } from '../models';
// @ts-ignore
import { SummaryAthlete } from '../models';
// @ts-ignore
import { UpdatableActivity } from '../models';
/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
export const ActivitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a manual activity for an athlete, requires activity:write scope.
         * @summary Create an Activity
         * @param {string} name The name of the activity.
         * @param {string} sportType Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.
         * @param {string} startDateLocal ISO 8601 formatted date time.
         * @param {number} elapsedTime In seconds.
         * @param {string} [type] Type of activity. For example - Run, Ride etc.
         * @param {string} [description] Description of the activity.
         * @param {number} [distance] In meters.
         * @param {number} [trainer] Set to 1 to mark as a trainer activity.
         * @param {number} [commute] Set to 1 to mark as commute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActivity: async (name: string, sportType: string, startDateLocal: string, elapsedTime: number, type?: string, description?: string, distance?: number, trainer?: number, commute?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createActivity', 'name', name)
            // verify required parameter 'sportType' is not null or undefined
            assertParamExists('createActivity', 'sportType', sportType)
            // verify required parameter 'startDateLocal' is not null or undefined
            assertParamExists('createActivity', 'startDateLocal', startDateLocal)
            // verify required parameter 'elapsedTime' is not null or undefined
            assertParamExists('createActivity', 'elapsedTime', elapsedTime)
            const localVarPath = `/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (sportType !== undefined) { 
                localVarFormParams.append('sport_type', sportType as any);
            }
    
            if (startDateLocal !== undefined) { 
                localVarFormParams.append('start_date_local', startDateLocal as any);
            }
    
            if (elapsedTime !== undefined) { 
                localVarFormParams.append('elapsed_time', elapsedTime as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (distance !== undefined) { 
                localVarFormParams.append('distance', distance as any);
            }
    
            if (trainer !== undefined) { 
                localVarFormParams.append('trainer', trainer as any);
            }
    
            if (commute !== undefined) { 
                localVarFormParams.append('commute', commute as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary Get Activity
         * @param {number} id The identifier of the activity.
         * @param {boolean} [includeAllEfforts] To include all segments efforts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityById: async (id: number, includeAllEfforts?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getActivityById', 'id', id)
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (includeAllEfforts !== undefined) {
                localVarQueryParameter['include_all_efforts'] = includeAllEfforts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary List Activity Comments
         * @param {number} id The identifier of the activity.
         * @param {number} [page] Deprecated. Prefer to use after_cursor.
         * @param {number} [perPage] Deprecated. Prefer to use page_size.
         * @param {number} [pageSize] Number of items per page. Defaults to 30.
         * @param {string} [afterCursor] Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentsByActivityId: async (id: number, page?: number, perPage?: number, pageSize?: number, afterCursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCommentsByActivityId', 'id', id)
            const localVarPath = `/activities/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (afterCursor !== undefined) {
                localVarQueryParameter['after_cursor'] = afterCursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary List Activity Kudoers
         * @param {number} id The identifier of the activity.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKudoersByActivityId: async (id: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getKudoersByActivityId', 'id', id)
            const localVarPath = `/activities/{id}/kudos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary List Activity Laps
         * @param {number} id The identifier of the activity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLapsByActivityId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLapsByActivityId', 'id', id)
            const localVarPath = `/activities/{id}/laps`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
         * @summary List Athlete Activities
         * @param {number} [before] An epoch timestamp to use for filtering activities that have taken place before a certain time.
         * @param {number} [after] An epoch timestamp to use for filtering activities that have taken place after a certain time.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoggedInAthleteActivities: async (before?: number, after?: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/athlete/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary Get Activity Zones
         * @param {number} id The identifier of the activity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZonesByActivityId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getZonesByActivityId', 'id', id)
            const localVarPath = `/activities/{id}/zones`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
         * @summary Update Activity
         * @param {number} id The identifier of the activity.
         * @param {UpdatableActivity} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActivityById: async (id: number, body?: UpdatableActivity, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateActivityById', 'id', id)
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivitiesApi - functional programming interface
 * @export
 */
export const ActivitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a manual activity for an athlete, requires activity:write scope.
         * @summary Create an Activity
         * @param {string} name The name of the activity.
         * @param {string} sportType Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.
         * @param {string} startDateLocal ISO 8601 formatted date time.
         * @param {number} elapsedTime In seconds.
         * @param {string} [type] Type of activity. For example - Run, Ride etc.
         * @param {string} [description] Description of the activity.
         * @param {number} [distance] In meters.
         * @param {number} [trainer] Set to 1 to mark as a trainer activity.
         * @param {number} [commute] Set to 1 to mark as commute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createActivity(name: string, sportType: string, startDateLocal: string, elapsedTime: number, type?: string, description?: string, distance?: number, trainer?: number, commute?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createActivity(name, sportType, startDateLocal, elapsedTime, type, description, distance, trainer, commute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary Get Activity
         * @param {number} id The identifier of the activity.
         * @param {boolean} [includeAllEfforts] To include all segments efforts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivityById(id: number, includeAllEfforts?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivityById(id, includeAllEfforts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary List Activity Comments
         * @param {number} id The identifier of the activity.
         * @param {number} [page] Deprecated. Prefer to use after_cursor.
         * @param {number} [perPage] Deprecated. Prefer to use page_size.
         * @param {number} [pageSize] Number of items per page. Defaults to 30.
         * @param {string} [afterCursor] Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommentsByActivityId(id: number, page?: number, perPage?: number, pageSize?: number, afterCursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentsByActivityId(id, page, perPage, pageSize, afterCursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary List Activity Kudoers
         * @param {number} id The identifier of the activity.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKudoersByActivityId(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SummaryAthlete>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKudoersByActivityId(id, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary List Activity Laps
         * @param {number} id The identifier of the activity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLapsByActivityId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Lap>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLapsByActivityId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
         * @summary List Athlete Activities
         * @param {number} [before] An epoch timestamp to use for filtering activities that have taken place before a certain time.
         * @param {number} [after] An epoch timestamp to use for filtering activities that have taken place after a certain time.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoggedInAthleteActivities(before?: number, after?: number, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SummaryActivity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoggedInAthleteActivities(before, after, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary Get Activity Zones
         * @param {number} id The identifier of the activity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZonesByActivityId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActivityZone>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getZonesByActivityId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
         * @summary Update Activity
         * @param {number} id The identifier of the activity.
         * @param {UpdatableActivity} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateActivityById(id: number, body?: UpdatableActivity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateActivityById(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActivitiesApi - factory interface
 * @export
 */
export const ActivitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivitiesApiFp(configuration)
    return {
        /**
         * Creates a manual activity for an athlete, requires activity:write scope.
         * @summary Create an Activity
         * @param {string} name The name of the activity.
         * @param {string} sportType Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.
         * @param {string} startDateLocal ISO 8601 formatted date time.
         * @param {number} elapsedTime In seconds.
         * @param {string} [type] Type of activity. For example - Run, Ride etc.
         * @param {string} [description] Description of the activity.
         * @param {number} [distance] In meters.
         * @param {number} [trainer] Set to 1 to mark as a trainer activity.
         * @param {number} [commute] Set to 1 to mark as commute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActivity(name: string, sportType: string, startDateLocal: string, elapsedTime: number, type?: string, description?: string, distance?: number, trainer?: number, commute?: number, options?: any): AxiosPromise<DetailedActivity> {
            return localVarFp.createActivity(name, sportType, startDateLocal, elapsedTime, type, description, distance, trainer, commute, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary Get Activity
         * @param {number} id The identifier of the activity.
         * @param {boolean} [includeAllEfforts] To include all segments efforts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityById(id: number, includeAllEfforts?: boolean, options?: any): AxiosPromise<DetailedActivity> {
            return localVarFp.getActivityById(id, includeAllEfforts, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary List Activity Comments
         * @param {number} id The identifier of the activity.
         * @param {number} [page] Deprecated. Prefer to use after_cursor.
         * @param {number} [perPage] Deprecated. Prefer to use page_size.
         * @param {number} [pageSize] Number of items per page. Defaults to 30.
         * @param {string} [afterCursor] Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentsByActivityId(id: number, page?: number, perPage?: number, pageSize?: number, afterCursor?: string, options?: any): AxiosPromise<Array<Comment>> {
            return localVarFp.getCommentsByActivityId(id, page, perPage, pageSize, afterCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary List Activity Kudoers
         * @param {number} id The identifier of the activity.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKudoersByActivityId(id: number, page?: number, perPage?: number, options?: any): AxiosPromise<Array<SummaryAthlete>> {
            return localVarFp.getKudoersByActivityId(id, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary List Activity Laps
         * @param {number} id The identifier of the activity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLapsByActivityId(id: number, options?: any): AxiosPromise<Array<Lap>> {
            return localVarFp.getLapsByActivityId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
         * @summary List Athlete Activities
         * @param {number} [before] An epoch timestamp to use for filtering activities that have taken place before a certain time.
         * @param {number} [after] An epoch timestamp to use for filtering activities that have taken place after a certain time.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoggedInAthleteActivities(before?: number, after?: number, page?: number, perPage?: number, options?: any): AxiosPromise<Array<SummaryActivity>> {
            return localVarFp.getLoggedInAthleteActivities(before, after, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
         * @summary Get Activity Zones
         * @param {number} id The identifier of the activity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZonesByActivityId(id: number, options?: any): AxiosPromise<Array<ActivityZone>> {
            return localVarFp.getZonesByActivityId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
         * @summary Update Activity
         * @param {number} id The identifier of the activity.
         * @param {UpdatableActivity} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActivityById(id: number, body?: UpdatableActivity, options?: any): AxiosPromise<DetailedActivity> {
            return localVarFp.updateActivityById(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivitiesApi - interface
 * @export
 * @interface ActivitiesApi
 */
export interface ActivitiesApiInterface {
    /**
     * Creates a manual activity for an athlete, requires activity:write scope.
     * @summary Create an Activity
     * @param {string} name The name of the activity.
     * @param {string} sportType Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.
     * @param {string} startDateLocal ISO 8601 formatted date time.
     * @param {number} elapsedTime In seconds.
     * @param {string} [type] Type of activity. For example - Run, Ride etc.
     * @param {string} [description] Description of the activity.
     * @param {number} [distance] In meters.
     * @param {number} [trainer] Set to 1 to mark as a trainer activity.
     * @param {number} [commute] Set to 1 to mark as commute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApiInterface
     */
    createActivity(name: string, sportType: string, startDateLocal: string, elapsedTime: number, type?: string, description?: string, distance?: number, trainer?: number, commute?: number, options?: AxiosRequestConfig): AxiosPromise<DetailedActivity>;

    /**
     * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @summary Get Activity
     * @param {number} id The identifier of the activity.
     * @param {boolean} [includeAllEfforts] To include all segments efforts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApiInterface
     */
    getActivityById(id: number, includeAllEfforts?: boolean, options?: AxiosRequestConfig): AxiosPromise<DetailedActivity>;

    /**
     * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @summary List Activity Comments
     * @param {number} id The identifier of the activity.
     * @param {number} [page] Deprecated. Prefer to use after_cursor.
     * @param {number} [perPage] Deprecated. Prefer to use page_size.
     * @param {number} [pageSize] Number of items per page. Defaults to 30.
     * @param {string} [afterCursor] Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApiInterface
     */
    getCommentsByActivityId(id: number, page?: number, perPage?: number, pageSize?: number, afterCursor?: string, options?: AxiosRequestConfig): AxiosPromise<Array<Comment>>;

    /**
     * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @summary List Activity Kudoers
     * @param {number} id The identifier of the activity.
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApiInterface
     */
    getKudoersByActivityId(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig): AxiosPromise<Array<SummaryAthlete>>;

    /**
     * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @summary List Activity Laps
     * @param {number} id The identifier of the activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApiInterface
     */
    getLapsByActivityId(id: number, options?: AxiosRequestConfig): AxiosPromise<Array<Lap>>;

    /**
     * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
     * @summary List Athlete Activities
     * @param {number} [before] An epoch timestamp to use for filtering activities that have taken place before a certain time.
     * @param {number} [after] An epoch timestamp to use for filtering activities that have taken place after a certain time.
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApiInterface
     */
    getLoggedInAthleteActivities(before?: number, after?: number, page?: number, perPage?: number, options?: AxiosRequestConfig): AxiosPromise<Array<SummaryActivity>>;

    /**
     * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @summary Get Activity Zones
     * @param {number} id The identifier of the activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApiInterface
     */
    getZonesByActivityId(id: number, options?: AxiosRequestConfig): AxiosPromise<Array<ActivityZone>>;

    /**
     * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
     * @summary Update Activity
     * @param {number} id The identifier of the activity.
     * @param {UpdatableActivity} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApiInterface
     */
    updateActivityById(id: number, body?: UpdatableActivity, options?: AxiosRequestConfig): AxiosPromise<DetailedActivity>;

}

/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
export class ActivitiesApi extends BaseAPI implements ActivitiesApiInterface {
    /**
     * Creates a manual activity for an athlete, requires activity:write scope.
     * @summary Create an Activity
     * @param {string} name The name of the activity.
     * @param {string} sportType Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.
     * @param {string} startDateLocal ISO 8601 formatted date time.
     * @param {number} elapsedTime In seconds.
     * @param {string} [type] Type of activity. For example - Run, Ride etc.
     * @param {string} [description] Description of the activity.
     * @param {number} [distance] In meters.
     * @param {number} [trainer] Set to 1 to mark as a trainer activity.
     * @param {number} [commute] Set to 1 to mark as commute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public createActivity(name: string, sportType: string, startDateLocal: string, elapsedTime: number, type?: string, description?: string, distance?: number, trainer?: number, commute?: number, options?: AxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).createActivity(name, sportType, startDateLocal, elapsedTime, type, description, distance, trainer, commute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @summary Get Activity
     * @param {number} id The identifier of the activity.
     * @param {boolean} [includeAllEfforts] To include all segments efforts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getActivityById(id: number, includeAllEfforts?: boolean, options?: AxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).getActivityById(id, includeAllEfforts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @summary List Activity Comments
     * @param {number} id The identifier of the activity.
     * @param {number} [page] Deprecated. Prefer to use after_cursor.
     * @param {number} [perPage] Deprecated. Prefer to use page_size.
     * @param {number} [pageSize] Number of items per page. Defaults to 30.
     * @param {string} [afterCursor] Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getCommentsByActivityId(id: number, page?: number, perPage?: number, pageSize?: number, afterCursor?: string, options?: AxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).getCommentsByActivityId(id, page, perPage, pageSize, afterCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @summary List Activity Kudoers
     * @param {number} id The identifier of the activity.
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getKudoersByActivityId(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).getKudoersByActivityId(id, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @summary List Activity Laps
     * @param {number} id The identifier of the activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getLapsByActivityId(id: number, options?: AxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).getLapsByActivityId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
     * @summary List Athlete Activities
     * @param {number} [before] An epoch timestamp to use for filtering activities that have taken place before a certain time.
     * @param {number} [after] An epoch timestamp to use for filtering activities that have taken place after a certain time.
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getLoggedInAthleteActivities(before?: number, after?: number, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).getLoggedInAthleteActivities(before, after, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @summary Get Activity Zones
     * @param {number} id The identifier of the activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getZonesByActivityId(id: number, options?: AxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).getZonesByActivityId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
     * @summary Update Activity
     * @param {number} id The identifier of the activity.
     * @param {UpdatableActivity} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public updateActivityById(id: number, body?: UpdatableActivity, options?: AxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).updateActivityById(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
