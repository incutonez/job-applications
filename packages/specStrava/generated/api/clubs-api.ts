/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClubActivity } from '../models';
// @ts-ignore
import { ClubAthlete } from '../models';
// @ts-ignore
import { DetailedClub } from '../models';
// @ts-ignore
import { Fault } from '../models';
// @ts-ignore
import { SummaryAthlete } from '../models';
// @ts-ignore
import { SummaryClub } from '../models';
/**
 * ClubsApi - axios parameter creator
 * @export
 */
export const ClubsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
         * @summary List Club Activities
         * @param {number} id The identifier of the club.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClubActivitiesById: async (id: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClubActivitiesById', 'id', id)
            const localVarPath = `/clubs/{id}/activities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the administrators of a given club.
         * @summary List Club Administrators
         * @param {number} id The identifier of the club.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClubAdminsById: async (id: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClubAdminsById', 'id', id)
            const localVarPath = `/clubs/{id}/admins`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a given club using its identifier.
         * @summary Get Club
         * @param {number} id The identifier of the club.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClubById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClubById', 'id', id)
            const localVarPath = `/clubs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the athletes who are members of a given club.
         * @summary List Club Members
         * @param {number} id The identifier of the club.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClubMembersById: async (id: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClubMembersById', 'id', id)
            const localVarPath = `/clubs/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the clubs whose membership includes the authenticated athlete.
         * @summary List Athlete Clubs
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoggedInAthleteClubs: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/athlete/clubs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClubsApi - functional programming interface
 * @export
 */
export const ClubsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClubsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
         * @summary List Club Activities
         * @param {number} id The identifier of the club.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClubActivitiesById(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClubActivity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClubActivitiesById(id, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the administrators of a given club.
         * @summary List Club Administrators
         * @param {number} id The identifier of the club.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClubAdminsById(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SummaryAthlete>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClubAdminsById(id, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a given club using its identifier.
         * @summary Get Club
         * @param {number} id The identifier of the club.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClubById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedClub>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClubById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the athletes who are members of a given club.
         * @summary List Club Members
         * @param {number} id The identifier of the club.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClubMembersById(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClubAthlete>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClubMembersById(id, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the clubs whose membership includes the authenticated athlete.
         * @summary List Athlete Clubs
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoggedInAthleteClubs(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SummaryClub>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoggedInAthleteClubs(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClubsApi - factory interface
 * @export
 */
export const ClubsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClubsApiFp(configuration)
    return {
        /**
         * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
         * @summary List Club Activities
         * @param {number} id The identifier of the club.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClubActivitiesById(id: number, page?: number, perPage?: number, options?: any): AxiosPromise<Array<ClubActivity>> {
            return localVarFp.getClubActivitiesById(id, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the administrators of a given club.
         * @summary List Club Administrators
         * @param {number} id The identifier of the club.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClubAdminsById(id: number, page?: number, perPage?: number, options?: any): AxiosPromise<Array<SummaryAthlete>> {
            return localVarFp.getClubAdminsById(id, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a given club using its identifier.
         * @summary Get Club
         * @param {number} id The identifier of the club.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClubById(id: number, options?: any): AxiosPromise<DetailedClub> {
            return localVarFp.getClubById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the athletes who are members of a given club.
         * @summary List Club Members
         * @param {number} id The identifier of the club.
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClubMembersById(id: number, page?: number, perPage?: number, options?: any): AxiosPromise<Array<ClubAthlete>> {
            return localVarFp.getClubMembersById(id, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the clubs whose membership includes the authenticated athlete.
         * @summary List Athlete Clubs
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [perPage] Number of items per page. Defaults to 30.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoggedInAthleteClubs(page?: number, perPage?: number, options?: any): AxiosPromise<Array<SummaryClub>> {
            return localVarFp.getLoggedInAthleteClubs(page, perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClubsApi - interface
 * @export
 * @interface ClubsApi
 */
export interface ClubsApiInterface {
    /**
     * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
     * @summary List Club Activities
     * @param {number} id The identifier of the club.
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubsApiInterface
     */
    getClubActivitiesById(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig): AxiosPromise<Array<ClubActivity>>;

    /**
     * Returns a list of the administrators of a given club.
     * @summary List Club Administrators
     * @param {number} id The identifier of the club.
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubsApiInterface
     */
    getClubAdminsById(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig): AxiosPromise<Array<SummaryAthlete>>;

    /**
     * Returns a given club using its identifier.
     * @summary Get Club
     * @param {number} id The identifier of the club.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubsApiInterface
     */
    getClubById(id: number, options?: AxiosRequestConfig): AxiosPromise<DetailedClub>;

    /**
     * Returns a list of the athletes who are members of a given club.
     * @summary List Club Members
     * @param {number} id The identifier of the club.
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubsApiInterface
     */
    getClubMembersById(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig): AxiosPromise<Array<ClubAthlete>>;

    /**
     * Returns a list of the clubs whose membership includes the authenticated athlete.
     * @summary List Athlete Clubs
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubsApiInterface
     */
    getLoggedInAthleteClubs(page?: number, perPage?: number, options?: AxiosRequestConfig): AxiosPromise<Array<SummaryClub>>;

}

/**
 * ClubsApi - object-oriented interface
 * @export
 * @class ClubsApi
 * @extends {BaseAPI}
 */
export class ClubsApi extends BaseAPI implements ClubsApiInterface {
    /**
     * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
     * @summary List Club Activities
     * @param {number} id The identifier of the club.
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubsApi
     */
    public getClubActivitiesById(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ClubsApiFp(this.configuration).getClubActivitiesById(id, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the administrators of a given club.
     * @summary List Club Administrators
     * @param {number} id The identifier of the club.
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubsApi
     */
    public getClubAdminsById(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ClubsApiFp(this.configuration).getClubAdminsById(id, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a given club using its identifier.
     * @summary Get Club
     * @param {number} id The identifier of the club.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubsApi
     */
    public getClubById(id: number, options?: AxiosRequestConfig) {
        return ClubsApiFp(this.configuration).getClubById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the athletes who are members of a given club.
     * @summary List Club Members
     * @param {number} id The identifier of the club.
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubsApi
     */
    public getClubMembersById(id: number, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ClubsApiFp(this.configuration).getClubMembersById(id, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the clubs whose membership includes the authenticated athlete.
     * @summary List Athlete Clubs
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [perPage] Number of items per page. Defaults to 30.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubsApi
     */
    public getLoggedInAthleteClubs(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ClubsApiFp(this.configuration).getLoggedInAthleteClubs(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
}
