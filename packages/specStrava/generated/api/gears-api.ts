/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DetailedGear } from '../models';
// @ts-ignore
import { Fault } from '../models';
/**
 * GearsApi - axios parameter creator
 * @export
 */
export const GearsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an equipment using its identifier.
         * @summary Get Equipment
         * @param {string} id The identifier of the gear.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGearById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGearById', 'id', id)
            const localVarPath = `/gear/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication strava_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "strava_oauth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GearsApi - functional programming interface
 * @export
 */
export const GearsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GearsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an equipment using its identifier.
         * @summary Get Equipment
         * @param {string} id The identifier of the gear.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGearById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedGear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGearById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GearsApi - factory interface
 * @export
 */
export const GearsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GearsApiFp(configuration)
    return {
        /**
         * Returns an equipment using its identifier.
         * @summary Get Equipment
         * @param {string} id The identifier of the gear.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGearById(id: string, options?: any): AxiosPromise<DetailedGear> {
            return localVarFp.getGearById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GearsApi - interface
 * @export
 * @interface GearsApi
 */
export interface GearsApiInterface {
    /**
     * Returns an equipment using its identifier.
     * @summary Get Equipment
     * @param {string} id The identifier of the gear.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GearsApiInterface
     */
    getGearById(id: string, options?: AxiosRequestConfig): AxiosPromise<DetailedGear>;

}

/**
 * GearsApi - object-oriented interface
 * @export
 * @class GearsApi
 * @extends {BaseAPI}
 */
export class GearsApi extends BaseAPI implements GearsApiInterface {
    /**
     * Returns an equipment using its identifier.
     * @summary Get Equipment
     * @param {string} id The identifier of the gear.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GearsApi
     */
    public getGearById(id: string, options?: AxiosRequestConfig) {
        return GearsApiFp(this.configuration).getGearById(id, options).then((request) => request(this.axios, this.basePath));
    }
}
