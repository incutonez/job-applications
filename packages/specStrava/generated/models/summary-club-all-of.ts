/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { ActivityType } from './activity-type';

/**
 * 
 * @export
 * @interface SummaryClubAllOf
 */
export interface SummaryClubAllOf {
    /**
     * URL to a 60x60 pixel profile picture.
     * @type {string}
     * @memberof SummaryClubAllOf
     */
    'profile_medium'?: string;
    /**
     * URL to a ~1185x580 pixel cover photo.
     * @type {string}
     * @memberof SummaryClubAllOf
     */
    'cover_photo'?: string;
    /**
     * URL to a ~360x176  pixel cover photo.
     * @type {string}
     * @memberof SummaryClubAllOf
     */
    'cover_photo_small'?: string;
    /**
     * Deprecated. Prefer to use activity_types.
     * @type {string}
     * @memberof SummaryClubAllOf
     */
    'sport_type'?: SummaryClubAllOfSportTypeEnum;
    /**
     * The activity types that count for a club. This takes precedence over sport_type.
     * @type {Array<ActivityType>}
     * @memberof SummaryClubAllOf
     */
    'activity_types'?: Array<ActivityType>;
    /**
     * The club\'s city.
     * @type {string}
     * @memberof SummaryClubAllOf
     */
    'city'?: string;
    /**
     * The club\'s state or geographical region.
     * @type {string}
     * @memberof SummaryClubAllOf
     */
    'state'?: string;
    /**
     * The club\'s country.
     * @type {string}
     * @memberof SummaryClubAllOf
     */
    'country'?: string;
    /**
     * Whether the club is private.
     * @type {boolean}
     * @memberof SummaryClubAllOf
     */
    'private'?: boolean;
    /**
     * The club\'s member count.
     * @type {number}
     * @memberof SummaryClubAllOf
     */
    'member_count'?: number;
    /**
     * Whether the club is featured or not.
     * @type {boolean}
     * @memberof SummaryClubAllOf
     */
    'featured'?: boolean;
    /**
     * Whether the club is verified or not.
     * @type {boolean}
     * @memberof SummaryClubAllOf
     */
    'verified'?: boolean;
    /**
     * The club\'s vanity URL.
     * @type {string}
     * @memberof SummaryClubAllOf
     */
    'url'?: string;
}

export const SummaryClubAllOfSportTypeEnum = {
    Cycling: 'cycling',
    Running: 'running',
    Triathlon: 'triathlon',
    Other: 'other'
} as const;

export type SummaryClubAllOfSportTypeEnum = typeof SummaryClubAllOfSportTypeEnum[keyof typeof SummaryClubAllOfSportTypeEnum];


