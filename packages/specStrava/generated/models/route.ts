/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { PolylineMap } from './polyline-map';
// May contain unused imports in some cases
// @ts-ignore
import { SummaryAthlete } from './summary-athlete';
// May contain unused imports in some cases
// @ts-ignore
import { SummarySegment } from './summary-segment';
// May contain unused imports in some cases
// @ts-ignore
import { Waypoint } from './waypoint';

/**
 * 
 * @export
 * @interface Route
 */
export interface Route {
    /**
     * 
     * @type {SummaryAthlete}
     * @memberof Route
     */
    'athlete'?: SummaryAthlete;
    /**
     * The description of the route
     * @type {string}
     * @memberof Route
     */
    'description'?: string;
    /**
     * The route\'s distance, in meters
     * @type {number}
     * @memberof Route
     */
    'distance'?: number;
    /**
     * The route\'s elevation gain.
     * @type {number}
     * @memberof Route
     */
    'elevation_gain'?: number;
    /**
     * The unique identifier of this route
     * @type {number}
     * @memberof Route
     */
    'id'?: number;
    /**
     * The unique identifier of the route in string format
     * @type {string}
     * @memberof Route
     */
    'id_str'?: string;
    /**
     * 
     * @type {PolylineMap}
     * @memberof Route
     */
    'map'?: PolylineMap;
    /**
     * The name of this route
     * @type {string}
     * @memberof Route
     */
    'name'?: string;
    /**
     * Whether this route is private
     * @type {boolean}
     * @memberof Route
     */
    'private'?: boolean;
    /**
     * Whether this route is starred by the logged-in athlete
     * @type {boolean}
     * @memberof Route
     */
    'starred'?: boolean;
    /**
     * An epoch timestamp of when the route was created
     * @type {number}
     * @memberof Route
     */
    'timestamp'?: number;
    /**
     * This route\'s type (1 for ride, 2 for runs)
     * @type {number}
     * @memberof Route
     */
    'type'?: number;
    /**
     * This route\'s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)
     * @type {number}
     * @memberof Route
     */
    'sub_type'?: number;
    /**
     * The time at which the route was created
     * @type {string}
     * @memberof Route
     */
    'created_at'?: string;
    /**
     * The time at which the route was last updated
     * @type {string}
     * @memberof Route
     */
    'updated_at'?: string;
    /**
     * Estimated time in seconds for the authenticated athlete to complete route
     * @type {number}
     * @memberof Route
     */
    'estimated_moving_time'?: number;
    /**
     * The segments traversed by this route
     * @type {Array<SummarySegment>}
     * @memberof Route
     */
    'segments'?: Array<SummarySegment>;
    /**
     * The custom waypoints along this route
     * @type {Array<Waypoint>}
     * @memberof Route
     */
    'waypoints'?: Array<Waypoint>;
}

