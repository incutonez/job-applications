/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface ExplorerSegment
 */
export interface ExplorerSegment {
    /**
     * The unique identifier of this segment
     * @type {number}
     * @memberof ExplorerSegment
     */
    'id'?: number;
    /**
     * The name of this segment
     * @type {string}
     * @memberof ExplorerSegment
     */
    'name'?: string;
    /**
     * The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3.
     * @type {number}
     * @memberof ExplorerSegment
     */
    'climb_category'?: number;
    /**
     * The description for the category of the climb
     * @type {string}
     * @memberof ExplorerSegment
     */
    'climb_category_desc'?: ExplorerSegmentClimbCategoryDescEnum;
    /**
     * The segment\'s average grade, in percents
     * @type {number}
     * @memberof ExplorerSegment
     */
    'avg_grade'?: number;
    /**
     * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
     * @type {Array<number>}
     * @memberof ExplorerSegment
     */
    'start_latlng'?: Array<number>;
    /**
     * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
     * @type {Array<number>}
     * @memberof ExplorerSegment
     */
    'end_latlng'?: Array<number>;
    /**
     * The segments\'s evelation difference, in meters
     * @type {number}
     * @memberof ExplorerSegment
     */
    'elev_difference'?: number;
    /**
     * The segment\'s distance, in meters
     * @type {number}
     * @memberof ExplorerSegment
     */
    'distance'?: number;
    /**
     * The polyline of the segment
     * @type {string}
     * @memberof ExplorerSegment
     */
    'points'?: string;
}

export const ExplorerSegmentClimbCategoryDescEnum = {
    Nc: 'NC',
    _4: '4',
    _3: '3',
    _2: '2',
    _1: '1',
    Hc: 'HC'
} as const;

export type ExplorerSegmentClimbCategoryDescEnum = typeof ExplorerSegmentClimbCategoryDescEnum[keyof typeof ExplorerSegmentClimbCategoryDescEnum];


