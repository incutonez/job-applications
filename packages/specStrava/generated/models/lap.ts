/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { MetaActivity } from './meta-activity';
// May contain unused imports in some cases
// @ts-ignore
import { MetaAthlete } from './meta-athlete';

/**
 * 
 * @export
 * @interface Lap
 */
export interface Lap {
    /**
     * The unique identifier of this lap
     * @type {number}
     * @memberof Lap
     */
    'id'?: number;
    /**
     * 
     * @type {MetaActivity}
     * @memberof Lap
     */
    'activity'?: MetaActivity;
    /**
     * 
     * @type {MetaAthlete}
     * @memberof Lap
     */
    'athlete'?: MetaAthlete;
    /**
     * The lap\'s average cadence
     * @type {number}
     * @memberof Lap
     */
    'average_cadence'?: number;
    /**
     * The lap\'s average speed
     * @type {number}
     * @memberof Lap
     */
    'average_speed'?: number;
    /**
     * The lap\'s distance, in meters
     * @type {number}
     * @memberof Lap
     */
    'distance'?: number;
    /**
     * The lap\'s elapsed time, in seconds
     * @type {number}
     * @memberof Lap
     */
    'elapsed_time'?: number;
    /**
     * The start index of this effort in its activity\'s stream
     * @type {number}
     * @memberof Lap
     */
    'start_index'?: number;
    /**
     * The end index of this effort in its activity\'s stream
     * @type {number}
     * @memberof Lap
     */
    'end_index'?: number;
    /**
     * The index of this lap in the activity it belongs to
     * @type {number}
     * @memberof Lap
     */
    'lap_index'?: number;
    /**
     * The maximum speed of this lat, in meters per second
     * @type {number}
     * @memberof Lap
     */
    'max_speed'?: number;
    /**
     * The lap\'s moving time, in seconds
     * @type {number}
     * @memberof Lap
     */
    'moving_time'?: number;
    /**
     * The name of the lap
     * @type {string}
     * @memberof Lap
     */
    'name'?: string;
    /**
     * The athlete\'s pace zone during this lap
     * @type {number}
     * @memberof Lap
     */
    'pace_zone'?: number;
    /**
     * 
     * @type {number}
     * @memberof Lap
     */
    'split'?: number;
    /**
     * The time at which the lap was started.
     * @type {string}
     * @memberof Lap
     */
    'start_date'?: string;
    /**
     * The time at which the lap was started in the local timezone.
     * @type {string}
     * @memberof Lap
     */
    'start_date_local'?: string;
    /**
     * The elevation gain of this lap, in meters
     * @type {number}
     * @memberof Lap
     */
    'total_elevation_gain'?: number;
}

