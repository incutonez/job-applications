/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { ActivityType } from './activity-type';
// May contain unused imports in some cases
// @ts-ignore
import { MetaAthlete } from './meta-athlete';
// May contain unused imports in some cases
// @ts-ignore
import { PolylineMap } from './polyline-map';
// May contain unused imports in some cases
// @ts-ignore
import { SportType } from './sport-type';

/**
 * 
 * @export
 * @interface SummaryActivityAllOf
 */
export interface SummaryActivityAllOf {
    /**
     * The identifier provided at upload time
     * @type {string}
     * @memberof SummaryActivityAllOf
     */
    'external_id'?: string;
    /**
     * The identifier of the upload that resulted in this activity
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'upload_id'?: number;
    /**
     * 
     * @type {MetaAthlete}
     * @memberof SummaryActivityAllOf
     */
    'athlete'?: MetaAthlete;
    /**
     * The name of the activity
     * @type {string}
     * @memberof SummaryActivityAllOf
     */
    'name'?: string;
    /**
     * The activity\'s distance, in meters
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'distance'?: number;
    /**
     * The activity\'s moving time, in seconds
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'moving_time'?: number;
    /**
     * The activity\'s elapsed time, in seconds
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'elapsed_time'?: number;
    /**
     * The activity\'s total elevation gain.
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'total_elevation_gain'?: number;
    /**
     * The activity\'s highest elevation, in meters
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'elev_high'?: number;
    /**
     * The activity\'s lowest elevation, in meters
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'elev_low'?: number;
    /**
     * 
     * @type {ActivityType}
     * @memberof SummaryActivityAllOf
     */
    'type'?: ActivityType;
    /**
     * 
     * @type {SportType}
     * @memberof SummaryActivityAllOf
     */
    'sport_type'?: SportType;
    /**
     * The time at which the activity was started.
     * @type {string}
     * @memberof SummaryActivityAllOf
     */
    'start_date'?: string;
    /**
     * The time at which the activity was started in the local timezone.
     * @type {string}
     * @memberof SummaryActivityAllOf
     */
    'start_date_local'?: string;
    /**
     * The timezone of the activity
     * @type {string}
     * @memberof SummaryActivityAllOf
     */
    'timezone'?: string;
    /**
     * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
     * @type {Array<number>}
     * @memberof SummaryActivityAllOf
     */
    'start_latlng'?: Array<number>;
    /**
     * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
     * @type {Array<number>}
     * @memberof SummaryActivityAllOf
     */
    'end_latlng'?: Array<number>;
    /**
     * The number of achievements gained during this activity
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'achievement_count'?: number;
    /**
     * The number of kudos given for this activity
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'kudos_count'?: number;
    /**
     * The number of comments for this activity
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'comment_count'?: number;
    /**
     * The number of athletes for taking part in a group activity
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'athlete_count'?: number;
    /**
     * The number of Instagram photos for this activity
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'photo_count'?: number;
    /**
     * The number of Instagram and Strava photos for this activity
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'total_photo_count'?: number;
    /**
     * 
     * @type {PolylineMap}
     * @memberof SummaryActivityAllOf
     */
    'map'?: PolylineMap;
    /**
     * Whether this activity was recorded on a training machine
     * @type {boolean}
     * @memberof SummaryActivityAllOf
     */
    'trainer'?: boolean;
    /**
     * Whether this activity is a commute
     * @type {boolean}
     * @memberof SummaryActivityAllOf
     */
    'commute'?: boolean;
    /**
     * Whether this activity was created manually
     * @type {boolean}
     * @memberof SummaryActivityAllOf
     */
    'manual'?: boolean;
    /**
     * Whether this activity is private
     * @type {boolean}
     * @memberof SummaryActivityAllOf
     */
    'private'?: boolean;
    /**
     * Whether this activity is flagged
     * @type {boolean}
     * @memberof SummaryActivityAllOf
     */
    'flagged'?: boolean;
    /**
     * The activity\'s workout type
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'workout_type'?: number;
    /**
     * The unique identifier of the upload in string format
     * @type {string}
     * @memberof SummaryActivityAllOf
     */
    'upload_id_str'?: string;
    /**
     * The activity\'s average speed, in meters per second
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'average_speed'?: number;
    /**
     * The activity\'s max speed, in meters per second
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'max_speed'?: number;
    /**
     * Whether the logged-in athlete has kudoed this activity
     * @type {boolean}
     * @memberof SummaryActivityAllOf
     */
    'has_kudoed'?: boolean;
    /**
     * Whether the activity is muted
     * @type {boolean}
     * @memberof SummaryActivityAllOf
     */
    'hide_from_home'?: boolean;
    /**
     * The id of the gear for the activity
     * @type {string}
     * @memberof SummaryActivityAllOf
     */
    'gear_id'?: string;
    /**
     * The total work done in kilojoules during this activity. Rides only
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'kilojoules'?: number;
    /**
     * Average power output in watts during this activity. Rides only
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'average_watts'?: number;
    /**
     * Whether the watts are from a power meter, false if estimated
     * @type {boolean}
     * @memberof SummaryActivityAllOf
     */
    'device_watts'?: boolean;
    /**
     * Rides with power meter data only
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'max_watts'?: number;
    /**
     * Similar to Normalized Power. Rides with power meter data only
     * @type {number}
     * @memberof SummaryActivityAllOf
     */
    'weighted_average_watts'?: number;
}



